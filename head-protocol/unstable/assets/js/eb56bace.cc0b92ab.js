"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[8335],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=o(a),k=l,c=m["".concat(p,".").concat(k)]||m[k]||u[k]||i;return a?n.createElement(c,s(s({ref:t},d),{},{components:a})):n.createElement(c,s({ref:t},d))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,s=new Array(i);s[0]=k;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:l,s[1]=r;for(var o=2;o<i;o++)s[o]=a[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},43003:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var n=a(87462),l=(a(67294),a(3905));const i={},s="Test results for hydra-node",r={unversionedId:"tests/hydra-node/hspec-results",id:"tests/hydra-node/hspec-results",title:"Test results for hydra-node",description:"Hydra.Utils",source:"@site/benchmarks/tests/hydra-node/hspec-results.md",sourceDirName:"tests/hydra-node",slug:"/tests/hydra-node/hspec-results",permalink:"/head-protocol/unstable/benchmarks/tests/hydra-node/hspec-results",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Test results for hydra-cluster",permalink:"/head-protocol/unstable/benchmarks/tests/hydra-cluster/hspec-results"},next:{title:"Test results for hydra-plutus",permalink:"/head-protocol/unstable/benchmarks/tests/hydra-plutus/hspec-results"}},p={},o=[{value:"Hydra.Utils",id:"hydrautils",level:2},{value:"Hydra.Persistence",id:"hydrapersistence",level:2},{value:"PersistenceIncremental",id:"persistenceincremental",level:3},{value:"Persistence",id:"persistence",level:3},{value:"Hydra.Party",id:"hydraparty",level:2},{value:"Ord",id:"ord",level:3},{value:"JSON encoding of Party",id:"json-encoding-of-party",level:3},{value:"Hydra.Options",id:"hydraoptions",level:2},{value:"Hydra Node RunOptions",id:"hydra-node-runoptions",level:3},{value:"JSON encoding of RunOptions",id:"json-encoding-of-runoptions",level:4},{value:"gen-hydra-keys sub-command",id:"gen-hydra-keys-sub-command",level:4},{value:"offline sub-command",id:"offline-sub-command",level:4},{value:"publish-scripts sub-command",id:"publish-scripts-sub-command",level:4},{value:"Hydra.Node.Run",id:"hydranoderun",level:2},{value:"Hydra.Node.InputQueue",id:"hydranodeinputqueue",level:2},{value:"Hydra.Node",id:"hydranode",level:2},{value:"checkHeadState",id:"checkheadstate",level:3},{value:"stepHydraNode",id:"stephydranode",level:3},{value:"hydrate",id:"hydrate",level:3},{value:"Hydra.Network.Reliability",id:"hydranetworkreliability",level:2},{value:"sending messages",id:"sending-messages",level:3},{value:"receiving messages",id:"receiving-messages",level:3},{value:"Hydra.Network.Heartbeat",id:"hydranetworkheartbeat",level:2},{value:"Hydra.Network.Authenticate",id:"hydranetworkauthenticate",level:2},{value:"Serialization",id:"serialization",level:3},{value:"JSON encoding of AuthLog",id:"json-encoding-of-authlog",level:4},{value:"Hydra.Network",id:"hydranetwork",level:2},{value:"configureMessagePersistence",id:"configuremessagepersistence",level:3},{value:"Serialisation",id:"serialisation",level:3},{value:"JSON encoding of (Message SimpleTx)",id:"json-encoding-of-message-simpletx",level:4},{value:"Ouroboros Network",id:"ouroboros-network",level:3},{value:"Hydra.Model.MockChain",id:"hydramodelmockchain",level:2},{value:"Hydra.Model",id:"hydramodel",level:2},{value:"Hydra.Logging.Monitoring",id:"hydraloggingmonitoring",level:2},{value:"Hydra.Logging",id:"hydralogging",level:2},{value:"Hydra.Ledger.Simple",id:"hydraledgersimple",level:2},{value:"Hydra.Ledger.Cardano.Time",id:"hydraledgercardanotime",level:2},{value:"Hydra.Ledger.Cardano",id:"hydraledgercardano",level:2},{value:"Generators",id:"generators",level:3},{value:"genChainPoint",id:"genchainpoint",level:4},{value:"genValue",id:"genvalue",level:4},{value:"genOutput",id:"genoutput",level:4},{value:"genTxOut",id:"gentxout",level:4},{value:"applyTransactions",id:"applytransactions",level:3},{value:"Tx",id:"tx",level:3},{value:"PParams",id:"pparams",level:3},{value:"UTxO",id:"utxo",level:3},{value:"JSON encoding of AssetName",id:"json-encoding-of-assetname",level:3},{value:"Hydra.JSONSchema",id:"hydrajsonschema",level:2},{value:"prop_validateJSONSchema",id:"prop_validatejsonschema",level:3},{value:"validateJSON withJsonSpecifications",id:"validatejson-withjsonspecifications",level:3},{value:"Hydra.HeadLogicSnapshot",id:"hydraheadlogicsnapshot",level:2},{value:"On AckSn",id:"on-acksn",level:3},{value:"On ReqTx",id:"on-reqtx",level:3},{value:"Generic Snapshot property",id:"generic-snapshot-property",level:3},{value:"Hydra.HeadLogic",id:"hydraheadlogic",level:2},{value:"Coordinated Head Protocol using real Tx",id:"coordinated-head-protocol-using-real-tx",level:3},{value:"Coordinated Head Protocol",id:"coordinated-head-protocol",level:3},{value:"Tracks Transaction Ids",id:"tracks-transaction-ids",level:4},{value:"Decommit",id:"decommit",level:4},{value:"ReqSn",id:"reqsn",level:4},{value:"Hydra.FireForget",id:"hydrafireforget",level:2},{value:"Hydra.Events.FileBased",id:"hydraeventsfilebased",level:2},{value:"eventPairFromPersistenceIncremental",id:"eventpairfrompersistenceincremental",level:3},{value:"persisted event format",id:"persisted-event-format",level:3},{value:"JSON encoding of StateChanged",id:"json-encoding-of-statechanged",level:4},{value:"JSON encoding of (StateEvent (Tx ConwayEra))",id:"json-encoding-of-stateevent-tx-conwayera",level:4},{value:"Hydra.Crypto",id:"hydracrypto",level:2},{value:"MultiSignature",id:"multisignature",level:3},{value:"Signature",id:"signature",level:3},{value:"VerificationKey",id:"verificationkey",level:3},{value:"JSON encoding of (VerificationKey HydraKey)",id:"json-encoding-of-verificationkey-hydrakey",level:4},{value:"SigningKey",id:"signingkey",level:3},{value:"Hydra.ContestationPeriod",id:"hydracontestationperiod",level:2},{value:"fromNominalDiffTime",id:"fromnominaldifftime",level:3},{value:"Hydra.Chain.Direct.Wallet",id:"hydrachaindirectwallet",level:2},{value:"newTinyWallet",id:"newtinywallet",level:3},{value:"coverFee",id:"coverfee",level:3},{value:"applyTxs",id:"applytxs",level:3},{value:"genTxsSpending / genUTxO",id:"gentxsspending--genutxo",level:3},{value:"Hydra.Chain.Direct.TxTrace",id:"hydrachaindirecttxtrace",level:2},{value:"Hydra.Chain.Direct.Tx",id:"hydrachaindirecttx",level:2},{value:"commitTx",id:"committx",level:3},{value:"observeHeadTx",id:"observeheadtx",level:3},{value:"HeadId (cardano)",id:"headid-cardano",level:3},{value:"HeadSeed (cardano)",id:"headseed-cardano",level:3},{value:"Hydra.Chain.Direct.TimeHandle",id:"hydrachaindirecttimehandle",level:2},{value:"Hydra.Chain.Direct.State",id:"hydrachaindirectstate",level:2},{value:"acceptance",id:"acceptance",level:3},{value:"fanout",id:"fanout",level:3},{value:"contest",id:"contest",level:3},{value:"close",id:"close",level:3},{value:"decrement",id:"decrement",level:3},{value:"recover",id:"recover",level:3},{value:"deposit",id:"deposit",level:3},{value:"collectCom",id:"collectcom",level:3},{value:"abort",id:"abort",level:3},{value:"commit",id:"commit",level:3},{value:"init",id:"init",level:3},{value:"splitUTxO",id:"splitutxo",level:3},{value:"observeTx",id:"observetx",level:3},{value:"JSON encoding of PubKeyHash",id:"json-encoding-of-pubkeyhash",level:3},{value:"Hydra.Chain.Direct.ScriptRegistry",id:"hydrachaindirectscriptregistry",level:2},{value:"Hydra.Chain.Direct.Handlers",id:"hydrachaindirecthandlers",level:2},{value:"LocalChainState",id:"localchainstate",level:3},{value:"chainSyncHandler",id:"chainsynchandler",level:3},{value:"Hydra.Behavior",id:"hydrabehavior",level:2},{value:"rolling back &amp; forward does not make the node crash",id:"rolling-back--forward-does-not-make-the-node-crash",level:3},{value:"Hydra Node Logging",id:"hydra-node-logging",level:3},{value:"Two participant Head",id:"two-participant-head",level:3},{value:"in an open head",id:"in-an-open-head",level:4},{value:"Decommit",id:"decommit-1",level:5},{value:"Commit",id:"commit-1",level:5},{value:"Single participant Head",id:"single-participant-head",level:3},{value:"Sanity tests of test suite",id:"sanity-tests-of-test-suite",level:3},{value:"Hydra.API.ServerOutput",id:"hydraapiserveroutput",level:2},{value:"JSON encoding of ServerOutput",id:"json-encoding-of-serveroutput",level:3},{value:"JSON encoding of (ReasonablySized (TimedServerOutput (Tx ConwayEra)))",id:"json-encoding-of-reasonablysized-timedserveroutput-tx-conwayera",level:3},{value:"Hydra.API.Server",id:"hydraapiserver",level:2},{value:"TLS support",id:"tls-support",level:3},{value:"Hydra.API.HTTPServer",id:"hydraapihttpserver",level:2},{value:"JSON encoding of (ReasonablySized TransactionSubmitted)",id:"json-encoding-of-reasonablysized-transactionsubmitted",level:3},{value:"JSON encoding of (ReasonablySized (SubmitTxRequest (Tx ConwayEra)))",id:"json-encoding-of-reasonablysized-submittxrequest-tx-conwayera",level:3},{value:"JSON encoding of (ReasonablySized (DraftCommitTxRequest (Tx ConwayEra)))",id:"json-encoding-of-reasonablysized-draftcommittxrequest-tx-conwayera",level:3},{value:"JSON encoding of (ReasonablySized (DraftCommitTxResponse (Tx ConwayEra)))",id:"json-encoding-of-reasonablysized-draftcommittxresponse-tx-conwayera",level:3},{value:"SubmitTxRequest accepted tx formats",id:"submittxrequest-accepted-tx-formats",level:3},{value:"API should respond correctly",id:"api-should-respond-correctly",level:3},{value:"POST /commit",id:"post-commit",level:4},{value:"GET /snapshot/utxo",id:"get-snapshotutxo",level:4},{value:"GET /protocol-parameters",id:"get-protocol-parameters",level:4},{value:"Hydra.API.ClientInput",id:"hydraapiclientinput",level:2},{value:"FromJSON (ValidatedTx era)",id:"fromjson-validatedtx-era",level:3},{value:"JSON encoding of (ReasonablySized (ClientInput (Tx ConwayEra)))",id:"json-encoding-of-reasonablysized-clientinput-tx-conwayera",level:3},{value:"JSON encoding of (ReasonablySized (ClientInput SimpleTx))",id:"json-encoding-of-reasonablysized-clientinput-simpletx",level:3}],d={toc:o},m="wrapper";function u(e){let{components:t,...a}=e;return(0,l.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"test-results-for-hydra-node"},"Test results for hydra-node"),(0,l.kt)("h2",{id:"hydrautils"},"Hydra.Utils"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Should throw if it can't write on disk"),(0,l.kt)("li",{parentName:"ul"},"Should throw if the file already exists")),(0,l.kt)("h2",{id:"hydrapersistence"},"Hydra.Persistence"),(0,l.kt)("h3",{id:"persistenceincremental"},"PersistenceIncremental"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can handle empty files")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is consistent after multiple append calls in presence of new-lines"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 400 tests:\n71.2% some item contains a new line\n 4.2% no items stored\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"it cannot load from a different thread once having started appending"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"persistence"},"Persistence"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can handle empty files")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is consistent after save/load roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydraparty"},"Hydra.Party"),(0,l.kt)("h3",{id:"ord"},"Ord"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is transitive"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 439 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is reflexive"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is antisymmetric"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"implements Eq and Ord correspondingly"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"json-encoding-of-party"},"JSON encoding of Party"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Party.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"has alice, bob, carol sorted"))),(0,l.kt)("h2",{id:"hydraoptions"},"Hydra.Options"),(0,l.kt)("h3",{id:"hydra-node-runoptions"},"Hydra Node RunOptions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validateRunOptions: using more than 7 parties should error out")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validateRunOptions: loaded cardano keys needs to match with the hydra keys length")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses with default values")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --host option given valid IPv4 and IPv6 addresses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --port option given valid port number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --peer ",(0,l.kt)("inlineCode",{parentName:"p"},"<host>:<port>")," option")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does parse --peer given ipv6 addresses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --monitoring-port option given valid port number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"flag --version returns version with base version from cabal")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --hydra-verification-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --hydra-signing-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --testnet-magic option as a number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --mainnet option")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --contestation-period option as a number of seconds")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --mainnet flag")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --node-socket as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --cardano-signing-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --cardano-verification-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --ledger-protocol-parameters-file as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --start-chain-from as a pair of slot number and block header hash")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --start-chain-from 0 as starting from genesis")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --hydra-scripts-tx-id as a tx id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"switches to offline chain when using --initial-utxo"))),(0,l.kt)("h4",{id:"json-encoding-of-runoptions"},"JSON encoding of RunOptions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/RunOptions.json"))),(0,l.kt)("h4",{id:"gen-hydra-keys-sub-command"},"gen-hydra-keys sub-command"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"should be able to parse gen-hydra-keys sub-command"),(0,l.kt)("li",{parentName:"ul"},"should parse gen-hydra-keys without the output-file flag using default file name")),(0,l.kt)("h4",{id:"offline-sub-command"},"offline sub-command"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"does parse with defaults"),(0,l.kt)("li",{parentName:"ul"},"does parse --ledger-genesis"),(0,l.kt)("li",{parentName:"ul"},"does parse --initial-utxo")),(0,l.kt)("h4",{id:"publish-scripts-sub-command"},"publish-scripts sub-command"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not parse without any options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not parse with some missing option (1)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not parse with some missing option (2)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not parse with some missing option (3)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"should parse using testnet and all options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"should parse using mainnet and all options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"roundtrip parsing & printing"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydranoderun"},"Hydra.Node.Run"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"throws exception given options are invalid")),(0,l.kt)("h2",{id:"hydranodeinputqueue"},"Hydra.Node.InputQueue"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"adds sequential id to all enqueued items"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydranode"},"Hydra.Node"),(0,l.kt)("h3",{id:"checkheadstate"},"checkHeadState"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"accepts configuration consistent with HeadState"),(0,l.kt)("li",{parentName:"ul"},"throws exception given contestation period differs"),(0,l.kt)("li",{parentName:"ul"},"throws exception given parties differ"),(0,l.kt)("li",{parentName:"ul"},"log error given configuration mismatches head state")),(0,l.kt)("h3",{id:"stephydranode"},"stepHydraNode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"events are sent to all sinks")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"event ids are strictly monotonic"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (0% empty list of events).\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can continue after re-hydration")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"emits a single ReqSn as leader, even after multiple ReqTxs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rotates snapshot leaders")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"processes out-of-order AckSn")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"notifies client when postTx throws PostTxError")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"signs snapshot even if it has seen conflicting transactions"))),(0,l.kt)("h3",{id:"hydrate"},"hydrate"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"loads events from source into all sinks"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"event ids are consistent"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"fails if one sink fails"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"checks head state"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydranetworkreliability"},"Hydra.Network.Reliability"),(0,l.kt)("h3",{id:"sending-messages"},"sending messages"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"broadcast messages to the network assigning a sequential id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"stress test networking layer"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 5000 tests.\n\nMessages from Alice to Bob (5000 in total):\n32.18% < 10\n19.20% < 20\n14.16% < 30\n10.68% < 40\n 7.76% < 50\n 5.70% < 60\n 4.82% < 70\n 3.22% < 80\n 1.82% < 90\n 0.46% < 100\n\nMessages from Bob to Alice (5000 in total):\n32.80% < 10\n18.96% < 20\n13.76% < 30\n10.70% < 40\n 7.58% < 50\n 6.48% < 60\n 4.20% < 70\n 3.14% < 80\n 1.70% < 90\n 0.68% < 100\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"broadcast updates counter from peers")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"appends messages to disk and can load them back"))),(0,l.kt)("h3",{id:"receiving-messages"},"receiving messages"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"forward received messages")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"do not drop messages with same ids from different peers")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Ignores messages with malformed acks")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"drops already received messages"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n67% 0\n25% 1\n 6% 2\n 2% 3\n"))))),(0,l.kt)("h2",{id:"hydranetworkheartbeat"},"Hydra.Network.Heartbeat"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"sends a heartbeat message with local host after 500 ms"),(0,l.kt)("li",{parentName:"ul"},"sends Connected when Ping received from other peer"),(0,l.kt)("li",{parentName:"ul"},"sends Connected when any message received from other party"),(0,l.kt)("li",{parentName:"ul"},"do not send Connected on subsequent messages from already Connected party"),(0,l.kt)("li",{parentName:"ul"},"sends Disconnected given no messages has been received from known party within twice heartbeat delay"),(0,l.kt)("li",{parentName:"ul"},"stop sending heartbeat message given action sends a message"),(0,l.kt)("li",{parentName:"ul"},"restart sending heartbeat messages given last message sent is older than heartbeat delay")),(0,l.kt)("h2",{id:"hydranetworkauthenticate"},"Hydra.Network.Authenticate"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pass the authenticated messages around"),(0,l.kt)("li",{parentName:"ul"},"drop message coming from unknown party"),(0,l.kt)("li",{parentName:"ul"},"drop message coming from party with wrong signature"),(0,l.kt)("li",{parentName:"ul"},"authenticate the message to broadcast"),(0,l.kt)("li",{parentName:"ul"},"logs dropped messages")),(0,l.kt)("h3",{id:"serialization"},"Serialization"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can roundtrip CBOR encoding/decoding of Signed Hydra Message"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"json-encoding-of-authlog"},"JSON encoding of AuthLog"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/AuthLog.json"))),(0,l.kt)("h2",{id:"hydranetwork"},"Hydra.Network"),(0,l.kt)("h3",{id:"configuremessagepersistence"},"configureMessagePersistence"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"throws ParameterMismatch when configuring given number of acks does not match number of parties")),(0,l.kt)("h3",{id:"serialisation"},"Serialisation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can roundtrip CBOR encoding/decoding of Hydra Message"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"json-encoding-of-message-simpletx"},"JSON encoding of (Message SimpleTx)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Message SimpleTx.json"))),(0,l.kt)("h3",{id:"ouroboros-network"},"Ouroboros Network"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"broadcasts messages to single connected peer"),(0,l.kt)("li",{parentName:"ul"},"handshake failures should call the handshakeCallback"),(0,l.kt)("li",{parentName:"ul"},"broadcasts messages between 3 connected peers")),(0,l.kt)("h2",{id:"hydramodelmockchain"},"Hydra.Model.MockChain"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"works with valid transaction"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydramodel"},"Hydra.Model"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"model should not generate 0 Ada UTxO"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 10000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"model generates consistent traces"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 10000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"implementation respects model"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nAction polarity (883 in total):\n100.0% +\n\nActions (883 in total):\n39.8% +NewTx\n21.5% +Commit\n10.4% +Seed\n 9.7% +Init\n 4.6% +RollbackAndForward\n 4.1% +Abort\n 4.1% +Decommit\n 2.9% +Close\n 2.8% +Fanout\n\nTransitions (883 in total):\n47.8% Open -> Open\n17.2% Initial -> Initial\n10.4% Start -> Idle\n 9.7% Idle -> Initial\n 4.3% Initial -> Open\n 4.1% Initial -> Final\n 2.9% Open -> Closed\n 2.8% Closed -> Final\n 0.7% Closed -> Closed\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"check conflict-free liveness"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nAction polarity (870 in total):\n100.0% +\n\nActions (870 in total):\n24.0% +NewTx\n23.8% +Commit\n11.5% +StopTheWorld\n10.7% +Seed\n10.3% +Init\n 4.0% +Abort\n 3.9% +Close\n 3.8% +Fanout\n 2.6% +Decommit\n 2.5% +RollbackAndForward\n 1.4% +ObserveConfirmedTx\n 1.4% +Wait\n\nTransitions (870 in total):\n32.9% Open -> Open\n19.5% Initial -> Initial\n10.7% Start -> Idle\n10.3% Idle -> Initial\n 7.8% Final -> Final\n 5.3% Initial -> Open\n 4.0% Initial -> Final\n 3.9% Open -> Closed\n 3.8% Closed -> Final\n 0.8% Start -> Start\n 0.6% Closed -> Closed\n 0.3% Idle -> Idle\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"check head opens if all participants commit"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nAction polarity (798 in total):\n100.0% +\n\nActions (798 in total):\n49.9% +Commit\n12.5% +Init\n12.5% +ObserveHeadIsOpen\n12.5% +Seed\n12.5% +Wait\n\nTransitions (798 in total):\n37.3% Initial -> Initial\n25.1% Open -> Open\n12.5% Idle -> Initial\n12.5% Initial -> Open\n12.5% Start -> Idle\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"fanout contains whole confirmed UTxO"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nAction polarity (894 in total):\n100.0% +\n\nActions (894 in total):\n23.4% +NewTx\n23.2% +Commit\n11.2% +StopTheWorld\n10.4% +Seed\n10.1% +Init\n 5.1% +Close\n 5.0% +Fanout\n 3.9% +Abort\n 2.6% +Decommit\n 2.5% +RollbackAndForward\n 1.3% +ObserveConfirmedTx\n 1.3% +Wait\n\nTransitions (894 in total):\n30.6% Open -> Open\n19.0% Initial -> Initial\n10.4% Start -> Idle\n10.1% Idle -> Initial\n 8.9% Final -> Final\n 5.1% Initial -> Open\n 5.1% Open -> Closed\n 5.0% Closed -> Final\n 3.9% Initial -> Final\n 0.8% Start -> Start\n 0.6% Closed -> Closed\n 0.3% Idle -> Idle\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"toRealUTxO is distributive"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"toTxOuts is distributive"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parties contest to wrong closed snapshot"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nAction polarity (1398 in total):\n100.00% +\n\nActions (1398 in total):\n28.47% +Commit\n14.31% +Wait\n 7.15% +CloseWithInitialSnapshot\n 7.15% +Fanout\n 7.15% +Init\n 7.15% +NewTx\n 7.15% +ObserveConfirmedTx\n 7.15% +ObserveHeadIsOpen\n 7.15% +Seed\n 7.15% +StopTheWorld\n\nTransitions (1398 in total):\n35.77% Open -> Open\n21.32% Initial -> Initial\n 7.15% Closed -> Final\n 7.15% Final -> Final\n 7.15% Idle -> Initial\n 7.15% Initial -> Open\n 7.15% Open -> Closed\n 7.15% Start -> Idle\n"))))),(0,l.kt)("h2",{id:"hydraloggingmonitoring"},"Hydra.Logging.Monitoring"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"provides prometheus metrics from traces")),(0,l.kt)("h2",{id:"hydralogging"},"Hydra.Logging"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"dumps logs to stdout in JSON with timestamp")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validates logs.yaml schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Schema covers all defined log entries"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydraledgersimple"},"Hydra.Ledger.Simple"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates only correctly built transactions"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydraledgercardanotime"},"Hydra.Ledger.Cardano.Time"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"roundtrip slotNoToUTCTime and slotNoFromUTCTime"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"slotNoFromUTCTime works for any time"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n59% before system start\n40% after system start\n 1% equal to system start\n"))))),(0,l.kt)("h2",{id:"hydraledgercardano"},"Hydra.Ledger.Cardano"),(0,l.kt)("h3",{id:"generators"},"Generators"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @TxIn is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @TxId is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @(VerificationKey PaymentKey) is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @(Hash PaymentKey) is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genUTxO does not generate collapsing values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genUTxOAdaOnlyOfSize does not generate collapsing values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genUTxOFor is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genOneUTxOFor is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n"))))),(0,l.kt)("h4",{id:"genchainpoint"},"genChainPoint"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"generates only some genesis points"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 800 tests (82.2% not at genesis).\n"))))),(0,l.kt)("h4",{id:"genvalue"},"genValue"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces realistic values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"genoutput"},"genOutput"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"has enough lovelace to cover assets"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"gentxout"},"genTxOut"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does generate good values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n63% has datum\n58% has only ADA\n55% is Script output\n45% is VK output\n42% has multiple assets\n"))))),(0,l.kt)("h3",{id:"applytransactions"},"applyTransactions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"works with valid transaction"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"works with valid transaction deserialised from JSON"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"tx"},"Tx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"JSON encoding of Tx according to schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n"))))),(0,l.kt)("h3",{id:"pparams"},"PParams"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Roundtrip JSON encoding"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"utxo"},"UTxO"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"JSON encoding of UTxO according to schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses a specific UTxO"))),(0,l.kt)("h3",{id:"json-encoding-of-assetname"},"JSON encoding of AssetName"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/AssetName.json"))),(0,l.kt)("h2",{id:"hydrajsonschema"},"Hydra.JSONSchema"),(0,l.kt)("h3",{id:"prop_validatejsonschema"},"prop_validateJSONSchema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"works with api.yaml and UTCTime"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n"))))),(0,l.kt)("h3",{id:"validatejson-withjsonspecifications"},"validateJSON withJsonSpecifications"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"works using identity selector and Null input"),(0,l.kt)("li",{parentName:"ul"},"fails on non-existing schema file"),(0,l.kt)("li",{parentName:"ul"},"fails with missing tool"),(0,l.kt)("li",{parentName:"ul"},"selects a sub-schema correctly"),(0,l.kt)("li",{parentName:"ul"},"produces helpful errors"),(0,l.kt)("li",{parentName:"ul"},"resolves refs")),(0,l.kt)("h2",{id:"hydraheadlogicsnapshot"},"Hydra.HeadLogicSnapshot"),(0,l.kt)("h3",{id:"on-acksn"},"On AckSn"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"sends ReqSn  when leader and there are seen transactions"),(0,l.kt)("li",{parentName:"ul"},"does NOT send ReqSn when we are the leader but there are NO seen transactions"),(0,l.kt)("li",{parentName:"ul"},"does NOT send ReqSn when we are NOT the leader but there are seen transactions"),(0,l.kt)("li",{parentName:"ul"},"updates seenSnapshot state when sending ReqSn")),(0,l.kt)("h3",{id:"on-reqtx"},"On ReqTx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"always emit ReqSn given head has 1 member"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends ReqSn when leader and no snapshot in flight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does NOT send ReqSn when we are NOT the leader even if no snapshot in flight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does NOT send ReqSn when we are the leader but snapshot in flight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"updates seenSnapshot state when sending ReqSn"))),(0,l.kt)("h3",{id:"generic-snapshot-property"},"Generic Snapshot property"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"there's always a leader for every snapshot number"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 15 discarded.\n"))))),(0,l.kt)("h2",{id:"hydraheadlogic"},"Hydra.HeadLogic"),(0,l.kt)("h3",{id:"coordinated-head-protocol-using-real-tx"},"Coordinated Head Protocol using real Tx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"any tx with expiring upper validity range gets pruned"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"coordinated-head-protocol"},"Coordinated Head Protocol"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"reports if a requested tx is expired"),(0,l.kt)("li",{parentName:"ul"},"waits if a requested tx is not (yet) applicable"),(0,l.kt)("li",{parentName:"ul"},"confirms snapshot given it receives AckSn from all parties")),(0,l.kt)("h4",{id:"tracks-transaction-ids"},"Tracks Transaction Ids"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"keeps transactions in allTxs given it receives a ReqTx"),(0,l.kt)("li",{parentName:"ul"},"removes transactions in allTxs given it receives a ReqSn"),(0,l.kt)("li",{parentName:"ul"},"removes transactions from allTxs when included in a acked snapshot even when emitting a ReqSn")),(0,l.kt)("h4",{id:"decommit"},"Decommit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"observes DecommitRequested and ReqDec in an Open state")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores ReqDec when not in Open state"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"reports if a requested decommit tx is expired")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"wait for second decommit when another one is in flight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"cannot commit while another decommit is pending")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if a requested decommit tx is not (yet) applicable")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"updates decommitTx on valid ReqDec")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"emits ReqSn on valid RecDec"))),(0,l.kt)("h4",{id:"reqsn"},"ReqSn"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"prunes local txs in order")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if one signature was from a different snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if one signature was from a different key")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if one signature was from a completely different message")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if already received signature from this party")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects snapshot request with transaction not applicable to previous snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if we receive a snapshot with unseen transactions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if we receive an AckSn for an unseen snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects if we receive a too far future snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if we receive a future snapshot while collecting signatures")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"acks signed snapshot from the constant leader")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not ack snapshots from non-leaders")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects too-old snapshots")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects too-old snapshots when collecting signatures")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects too-new snapshots from the leader")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects invalid snapshots version")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects overlapping snapshot requests from the leader")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects same version snapshot requests with differring decommit txs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores in-flight ReqTx when closed")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores in-flight ReqDec when closed")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"everyone does collect on last commit after collect com")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"cannot observe abort after collect com")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"cannot observe collect com after abort")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"notifies user on head closing and when passing the contestation deadline")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"contests when detecting close with old snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"re-contests when detecting contest with old snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores unrelated initTx"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"connectivity messages passthrough without affecting the current state"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores abortTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores collectComTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores depositTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores recoverTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores decrementTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores closeTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores contestTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores fanoutTx of another head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"empty inputs in decommit tx are prevented"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydrafireforget"},"Hydra.FireForget"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"client can send 'Hail Hydra!' to server")),(0,l.kt)("h2",{id:"hydraeventsfilebased"},"Hydra.Events.FileBased"),(0,l.kt)("h3",{id:"eventpairfrompersistenceincremental"},"eventPairFromPersistenceIncremental"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can handle continuous events"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can handle non-continuous events"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can handle duplicate events"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can bootstrap from plain StateChanged events"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"persisted-event-format"},"persisted event format"),(0,l.kt)("h4",{id:"json-encoding-of-statechanged"},"JSON encoding of StateChanged"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"allows to encode values with aeson and read them back"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/HeadInitialized.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/CommittedUTxO.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/HeadAborted.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/HeadOpened.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/TransactionReceived.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/TransactionAppliedToLocalUTxO.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/CommitRecorded.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/CommitRecovered.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/DecommitRecorded.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/SnapshotRequestDecided.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/SnapshotRequested.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/CommitFinalized.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/DecommitFinalized.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/PartySignedSnapshot.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/SnapshotConfirmed.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/HeadClosed.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/HeadContested.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/HeadIsReadyToFanout.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/HeadFannedOut.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/ChainRolledBack.json"),(0,l.kt)("li",{parentName:"ul"},"produces the same JSON as is found in golden/StateChanged/TickObserved.json")),(0,l.kt)("h4",{id:"json-encoding-of-stateevent-tx-conwayera"},"JSON encoding of (StateEvent (Tx ConwayEra))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/StateEvent (Tx ConwayEra).json"))),(0,l.kt)("h2",{id:"hydracrypto"},"Hydra.Crypto"),(0,l.kt)("h3",{id:"multisignature"},"MultiSignature"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is sensitive to order"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 60 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"aggregate/verifyMultiSignature roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"aggregateInOrder/verifyMultiSignature roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 18 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"verifyMultiSignature fails when signature is missing"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 88 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not validate multisig if less keys given"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 21 discarded (10% empty).\n"))))),(0,l.kt)("h3",{id:"signature"},"Signature"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"show includes escaped hex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can sign arbitrary messages"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 31 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sign/verify roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"verificationkey"},"VerificationKey"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"show includes escaped hex")),(0,l.kt)("h4",{id:"json-encoding-of-verificationkey-hydrakey"},"JSON encoding of (VerificationKey HydraKey)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/VerificationKey HydraKey.json"))),(0,l.kt)("h3",{id:"signingkey"},"SigningKey"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"show includes escaped hex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can be generated when seed exceeds the max seed size for algorithm")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can be generated"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 30 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @(SigningKey HydraKey) is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n"))))),(0,l.kt)("h2",{id:"hydracontestationperiod"},"Hydra.ContestationPeriod"),(0,l.kt)("h3",{id:"fromnominaldifftime"},"fromNominalDiffTime"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"works for diff times > 0"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"fails for diff times <= 0"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rounds to 1 second"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydrachaindirectwallet"},"Hydra.Chain.Direct.Wallet"),(0,l.kt)("h3",{id:"newtinywallet"},"newTinyWallet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"initialises wallet by querying UTxO"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"re-queries UTxO from the tip, even on reset"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"coverfee"},"coverFee"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sets min utxo values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"balances transaction with fees"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (0% spending script).\n\nOnly 0% spending script, but expected 5%\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"prefers largest utxo"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"applytxs"},"applyTxs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"only reduces the UTXO set when no address is ours"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Seen inputs are consumed and not in the resulting UTXO"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"gentxsspending--genutxo"},"genTxsSpending / genUTxO"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"are well-suited for testing"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n35% has dependent txs\n28% has no tx that are ours\n"))))),(0,l.kt)("h2",{id:"hydrachaindirecttxtrace"},"Hydra.Chain.Direct.TxTrace"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"realWorldModelUTxO preserves addition"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"generates interesting transaction traces"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 3200 tests:\n93.06% has some snapshots\n66.38% close with non initial snapshots\n44.97% reach fanout\n28.47% fanout with some UTxO\n20.66% fanout with additional UTxO to distribute\n16.50% fanout with empty UTxO\n 6.94% empty\n 6.94% has decrements\n 3.50% has multiple contests\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"all valid transactions"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 800 tests:\n94.1% has some snapshots\n67.0% close with non initial snapshots\n45.1% reach fanout\n28.2% fanout with some UTxO\n20.0% fanout with additional UTxO to distribute\n16.9% fanout with empty UTxO\n 5.9% empty\n 5.9% has decrements\n 2.8% has multiple contests\n\nAction polarity (8814 in total):\n50.12% +\n49.88% -\n\nActions (8814 in total):\n38.08% -Contest\n29.09% +NewSnapshot\n11.80% -Decrement\n 8.94% +Decrement\n 6.08% +Close\n 4.10% +Fanout\n 1.92% +Contest\n\nActions rejected by precondition (80 in total):\n100% Close\n"))))),(0,l.kt)("h2",{id:"hydrachaindirecttx"},"Hydra.Chain.Direct.Tx"),(0,l.kt)("h3",{id:"committx"},"commitTx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genBlueprintTx generates interesting txs"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n100% blueprint has reference input\n100% blueprint spends script UTxO\n68% blueprint spends from script AND pub key\n68% blueprint spends pub key UTxO\n46% blueprint has reward redeemer\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate blueprint and commit transactions"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"observeheadtx"},"observeHeadTx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"All valid transitions for all possible states can be observed."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nChainTransition (200 in total):\n15.5% Abort\n15.0% Fanout\n13.5% Init\n12.0% Decrement\n11.0% Collect\n 9.5% Increment\n 9.0% Commit\n 8.5% Contest\n 6.0% Close\n"))))),(0,l.kt)("h3",{id:"headid-cardano"},"HeadId (cardano)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"headIdToPolicyId . mkHeadId === id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"curencySymbolToHeadId . headIdToCurrencySymbol === id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"headseed-cardano"},"HeadSeed (cardano)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"headSeedToTxIn . txInToHeadSeed === id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydrachaindirecttimehandle"},"Hydra.Chain.Direct.TimeHandle"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can roundtrip currentPointInTime"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"should convert slot within latest/current era"))),(0,l.kt)("h2",{id:"hydrachaindirectstate"},"Hydra.Chain.Direct.State"),(0,l.kt)("h3",{id:"acceptance"},"acceptance"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can close & fanout every collected head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n59% collect, close and fanout passed\n41% collect failed already\n"))))),(0,l.kt)("h3",{id:"fanout"},"fanout"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n52% Fanout size: 40-44\n29% Fanout size: 10-40\n18% Fanout size: 1-10\n 1% Fanout size: 0\n\n68% 12kB\n32% 11kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n52% Fanout size: 40-44\n29% Fanout size: 10-40\n18% Fanout size: 1-10\n 1% Fanout size: 0\n"))))),(0,l.kt)("h3",{id:"contest"},"contest"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 1kB).\n\nClose point (slot) (100 in total):\n100% > 0\n\nContestation period (100 in total):\n21% < k blocks\n18% one week\n17% one month\n16% one year\n14% > k blocks\n 9% k blocks on mainnet\n 5% one day\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nClose point (slot) (100 in total):\n100% > 0\n\nContestation period (100 in total):\n21% < k blocks\n18% one week\n17% one month\n16% one year\n14% > k blocks\n 9% k blocks on mainnet\n 5% one day\n"))))),(0,l.kt)("h3",{id:"close"},"close"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n100% ConfirmedSnapshot\n\n100% 1kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% ConfirmedSnapshot).\n"))))),(0,l.kt)("h3",{id:"decrement"},"decrement"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 1kB).\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"observes distributed outputs"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"recover"},"recover"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 4kB).\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"observes recover"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"deposit"},"deposit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 0kB).\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"observes deposit"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"collectcom"},"collectCom"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 1kB).\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"abort"},"abort"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n66% Abort after some (but not all) commits\n18% Abort after all commits\n16% Abort immediately, after 0 commits\n\n98% 11kB\n 2% 12kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n66% Abort after some (but not all) commits\n18% Abort after all commits\n16% Abort immediately, after 0 commits\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can create valid abort transactions for any observed head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"commit"},"commit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n91% Non-empty commit\n 9% Empty commit\n\n100% 0kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n91% Non-empty commit\n 9% Empty commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"only proper head is observed"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n91% Non-empty commit\n 9% Empty commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"consumes all inputs that are committed"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n91% Non-empty commit\n 9% Empty commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can only be applied / observed once"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n91% Non-empty commit\n 9% Empty commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"reject committing outputs with byron addresses"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"reject Commits with more than maxMainnetLovelace Lovelace"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"init"},"init"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n100% 2+ parties\n 0% 1 party\n\n51% 12kB\n49% 11kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n100% 2+ parties\n 0% 1 party\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"only proper head is observed"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% NotAHeadPolicy).\n"))))),(0,l.kt)("h3",{id:"splitutxo"},"splitUTxO"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"it splits at least one utxo off"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 40 discarded.\n"))))),(0,l.kt)("h3",{id:"observetx"},"observeTx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"All valid transitions for all possible states can be observed."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nChainTransition (200 in total):\n15.5% Abort\n15.0% Fanout\n13.5% Init\n12.0% Decrement\n11.0% Collect\n 9.5% Increment\n 9.0% Commit\n 8.5% Contest\n 6.0% Close\n"))))),(0,l.kt)("h3",{id:"json-encoding-of-pubkeyhash"},"JSON encoding of PubKeyHash"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/PubKeyHash.json"))),(0,l.kt)("h2",{id:"hydrachaindirectscriptregistry"},"Hydra.Chain.Direct.ScriptRegistry"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"newScriptRegistry (registryUTxO r) === Just r"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydrachaindirecthandlers"},"Hydra.Chain.Direct.Handlers"),(0,l.kt)("h3",{id:"localchainstate"},"LocalChainState"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can resume from chain state"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n17% Rollback 2 blocks\n16% Rollback 4 blocks\n12% Rollback 3 blocks\n12% Rollback 5 blocks\n11% Rollback 1 blocks\n11% Rollback 7 blocks\n10% Rollback 0 blocks\n 7% Rollback 8 blocks\n 4% Rollback 6 blocks\n"))))),(0,l.kt)("h3",{id:"chainsynchandler"},"chainSyncHandler"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"roll forward results in Tick events"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"roll forward fails with outdated TimeHandle"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"observes transactions onRollForward"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n14% Commit\n13% Collect\n11% Decrement\n11% Fanout\n11% Increment\n11% Init\n10% Abort\n10% Close\n 9% Contest\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rollbacks state onRollBackward"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n 9% Rollback to: ChainSlot 0 / 5\n 9% Rollback to: ChainSlot 0 / 7\n 8% Rollback to: ChainSlot 0 / 3\n 7% Rollback to: ChainSlot 0 / 4\n 7% Rollback to: ChainSlot 1 / 2\n 6% Rollback to: ChainSlot 0 / 2\n 6% Rollback to: ChainSlot 0 / 6\n 5% Rollback to: ChainSlot 0 / 8\n 4% Rollback to: ChainSlot 2 / 2\n 3% Rollback to: ChainSlot 3 / 3\n 3% Rollback to: ChainSlot 3 / 8\n 3% Rollback to: ChainSlot 4 / 4\n 3% Rollback to: ChainSlot 5 / 5\n 3% Rollback to: ChainSlot 7 / 7\n 2% Rollback to: ChainSlot 2 / 4\n 2% Rollback to: ChainSlot 2 / 7\n 2% Rollback to: ChainSlot 3 / 4\n 2% Rollback to: ChainSlot 6 / 6\n 1% Rollback to: ChainSlot 1 / 3\n 1% Rollback to: ChainSlot 1 / 4\n 1% Rollback to: ChainSlot 1 / 5\n 1% Rollback to: ChainSlot 1 / 7\n 1% Rollback to: ChainSlot 1 / 8\n 1% Rollback to: ChainSlot 2 / 3\n 1% Rollback to: ChainSlot 2 / 5\n 1% Rollback to: ChainSlot 2 / 6\n 1% Rollback to: ChainSlot 3 / 5\n 1% Rollback to: ChainSlot 3 / 7\n 1% Rollback to: ChainSlot 4 / 5\n 1% Rollback to: ChainSlot 4 / 7\n 1% Rollback to: ChainSlot 5 / 8\n 1% Rollback to: ChainSlot 6 / 7\n 1% Rollback to: ChainSlot 6 / 8\n 1% Rollback to: ChainSlot 7 / 8\n"))))),(0,l.kt)("h2",{id:"hydrabehavior"},"Hydra.Behavior"),(0,l.kt)("h3",{id:"rolling-back--forward-does-not-make-the-node-crash"},"rolling back & forward does not make the node crash"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"does work for rollbacks past init"),(0,l.kt)("li",{parentName:"ul"},"does work for rollbacks past open")),(0,l.kt)("h3",{id:"hydra-node-logging"},"Hydra Node Logging"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"traces processing of events"),(0,l.kt)("li",{parentName:"ul"},"traces handling of effects")),(0,l.kt)("h3",{id:"two-participant-head"},"Two participant Head"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"only opens the head after all nodes committed"),(0,l.kt)("li",{parentName:"ul"},"can abort and re-open a head when one party has not committed"),(0,l.kt)("li",{parentName:"ul"},"cannot abort head when commits have been collected"),(0,l.kt)("li",{parentName:"ul"},"ignores head initialization of other head"),(0,l.kt)("li",{parentName:"ul"},"outputs committed utxo when client requests it")),(0,l.kt)("h4",{id:"in-an-open-head"},"in an open head"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"sees the head closed by other nodes"),(0,l.kt)("li",{parentName:"ul"},"valid new transactions are seen by all parties"),(0,l.kt)("li",{parentName:"ul"},"valid new transactions get snapshotted"),(0,l.kt)("li",{parentName:"ul"},"snapshots are created as long as transactions to snapshot exist"),(0,l.kt)("li",{parentName:"ul"},"depending transactions stay pending and are confirmed in order"),(0,l.kt)("li",{parentName:"ul"},"depending transactions expire if not applicable in time"),(0,l.kt)("li",{parentName:"ul"},"sending two conflicting transactions should lead one being confirmed and one expired"),(0,l.kt)("li",{parentName:"ul"},"outputs utxo from confirmed snapshot when client requests it")),(0,l.kt)("h5",{id:"decommit-1"},"Decommit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"can request decommit"),(0,l.kt)("li",{parentName:"ul"},"requested decommits get approved"),(0,l.kt)("li",{parentName:"ul"},"can only process one decommit at once"),(0,l.kt)("li",{parentName:"ul"},"can process transactions while decommit pending"),(0,l.kt)("li",{parentName:"ul"},"can close with decommit in flight"),(0,l.kt)("li",{parentName:"ul"},"fanout utxo is correct after a decommit")),(0,l.kt)("h5",{id:"commit-1"},"Commit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"requested commits get approved"),(0,l.kt)("li",{parentName:"ul"},"can process multiple commits"),(0,l.kt)("li",{parentName:"ul"},"can process transactions while commit pending"),(0,l.kt)("li",{parentName:"ul"},"can close with commit in flight"),(0,l.kt)("li",{parentName:"ul"},"fanout utxo is correct after a commit"),(0,l.kt)("li",{parentName:"ul"},"multiple commits and decommits in sequence"),(0,l.kt)("li",{parentName:"ul"},"commit and decommit same utxo")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"can be finalized by all parties after contestation period"),(0,l.kt)("li",{parentName:"ul"},"contest automatically when detecting closing with old snapshot")),(0,l.kt)("h3",{id:"single-participant-head"},"Single participant Head"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"accepts Init command"),(0,l.kt)("li",{parentName:"ul"},"accepts Commit after successful Init"),(0,l.kt)("li",{parentName:"ul"},"can close an open head"),(0,l.kt)("li",{parentName:"ul"},"does not fanout automatically"),(0,l.kt)("li",{parentName:"ul"},"does finalize head after contestation period upon command")),(0,l.kt)("h3",{id:"sanity-tests-of-test-suite"},"Sanity tests of test suite"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"does not delay for real")),(0,l.kt)("h2",{id:"hydraapiserveroutput"},"Hydra.API.ServerOutput"),(0,l.kt)("h3",{id:"json-encoding-of-serveroutput"},"JSON encoding of ServerOutput"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/PeerConnected.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/PeerDisconnected.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/PeerHandshakeFailure.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/HeadIsInitializing.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/Committed.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/HeadIsOpen.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/HeadIsClosed.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/HeadIsContested.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/ReadyToFanout.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/HeadIsAborted.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/HeadIsFinalized.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/CommandFailed.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/TxValid.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/TxInvalid.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/SnapshotConfirmed.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/GetUTxOResponse.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/InvalidInput.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/Greetings.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/PostTxOnChainFailed.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/IgnoredHeadInitializing.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/DecommitRequested.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/DecommitInvalid.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/DecommitApproved.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/CommitRecorded.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/CommitApproved.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/DecommitFinalized.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/CommitFinalized.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ServerOutput/CommitRecovered.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"matches JSON schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n"))))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-timedserveroutput-tx-conwayera"},"JSON encoding of (ReasonablySized (TimedServerOutput (Tx ConwayEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (TimedServerOutput (Tx ConwayEra)).json"))),(0,l.kt)("h2",{id:"hydraapiserver"},"Hydra.API.Server"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"should fail on port in use")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"greets")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Greetings should contain the hydra-node version")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends sendOutput to all connected clients")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends all sendOutput history to all connected clients after a restart")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"echoes history (past outputs) to client upon reconnection"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests:\n93.5% more than one message when reconnecting\n 4.0% no message when reconnecting\n 2.5% only one message when reconnecting\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not echo history if client says no"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests:\n93.5% more than one message when reconnecting\n 4.0% no message when reconnecting\n 2.5% only one message when reconnecting\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"removes UTXO from snapshot when clients request it")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sequence numbers are continuous"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"displays correctly headStatus and snapshotUtxo in a Greeting message")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"greets with correct head status and snapshot utxo after restart")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends an error when input cannot be decoded"))),(0,l.kt)("h3",{id:"tls-support"},"TLS support"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"accepts TLS connections when configured")),(0,l.kt)("h2",{id:"hydraapihttpserver"},"Hydra.API.HTTPServer"),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-transactionsubmitted"},"JSON encoding of (ReasonablySized TransactionSubmitted)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized TransactionSubmitted.json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-submittxrequest-tx-conwayera"},"JSON encoding of (ReasonablySized (SubmitTxRequest (Tx ConwayEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (SubmitTxRequest (Tx ConwayEra)).json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-draftcommittxrequest-tx-conwayera"},"JSON encoding of (ReasonablySized (DraftCommitTxRequest (Tx ConwayEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (DraftCommitTxRequest (Tx ConwayEra)).json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-draftcommittxresponse-tx-conwayera"},"JSON encoding of (ReasonablySized (DraftCommitTxResponse (Tx ConwayEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (DraftCommitTxResponse (Tx ConwayEra)).json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commit publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commit subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /cardano-transaction publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /cardano-transaction subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /decommit publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /decommit subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commit publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commit subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commits publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commits subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commits/tx-id publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commits/tx-id subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n"))))),(0,l.kt)("h3",{id:"submittxrequest-accepted-tx-formats"},"SubmitTxRequest accepted tx formats"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"accepts json encoded transaction"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"accepts transaction encoded as TextEnvelope"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"api-should-respond-correctly"},"API should respond correctly"),(0,l.kt)("h4",{id:"post-commit"},"POST /commit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"responds on valid requests"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"handles PostTxErrors accordingly"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 400 tests:\n 4.8% InvalidHeadId\n 4.5% CannotFindOwnInitial\n 4.2% UnsupportedLegacyOutput\n 4.0% CommittedTooMuchADAForMainnet\n"))))),(0,l.kt)("h4",{id:"get-snapshotutxo"},"GET /snapshot/utxo"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"responds correctly"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ok response matches schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 4 tests:\n75% non empty\n25% empty\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"has inlineDatumRaw"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"get-protocol-parameters"},"GET /protocol-parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"matches schema"),(0,l.kt)("li",{parentName:"ul"},"responds given parameters")),(0,l.kt)("h2",{id:"hydraapiclientinput"},"Hydra.API.ClientInput"),(0,l.kt)("h3",{id:"fromjson-validatedtx-era"},"FromJSON (ValidatedTx era)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"accepts transactions produced via cardano-cli"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-clientinput-tx-conwayera"},"JSON encoding of (ReasonablySized (ClientInput (Tx ConwayEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ClientInput (Tx ConwayEra)).json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-clientinput-simpletx"},"JSON encoding of (ReasonablySized (ClientInput SimpleTx))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ClientInput SimpleTx).json"))))}u.isMDXComponent=!0}}]);