"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[9668],{3905:(e,n,o)=>{o.d(n,{Zo:()=>m,kt:()=>A});var t=o(67294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function c(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function d(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=t.createContext({}),l=function(e){var n=t.useContext(a),o=n;return e&&(o="function"==typeof e?e(n):c(c({},n),e)),o},m=function(e){var n=l(e.components);return t.createElement(a.Provider,{value:n},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),s=l(o),u=r,A=s["".concat(a,".").concat(u)]||s[u]||p[u]||i;return o?t.createElement(A,c(c({ref:n},m),{},{components:o})):t.createElement(A,c({ref:n},m))}));function A(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=o.length,c=new Array(i);c[0]=u;var d={};for(var a in n)hasOwnProperty.call(n,a)&&(d[a]=n[a]);d.originalType=e,d[s]="string"==typeof e?e:r,c[1]=d;for(var l=2;l<i;l++)c[l]=o[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},88906:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var t=o(87462),r=(o(67294),o(3905));const i={},c="Protocol",d={unversionedId:"dev/protocol",id:"dev/protocol",title:"Protocol",description:"Additional implementation-specific documentation for the Hydra Head protocol and extensions like incremental decommits.",source:"@site/docs/dev/protocol.md",sourceDirName:"dev",slug:"/dev/protocol",permalink:"/head-protocol/unstable/docs/dev/protocol",draft:!1,editUrl:"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/dev/protocol.md",tags:[],version:"current",frontMatter:{},sidebar:"developerDocumentation",previous:{title:"Specification",permalink:"/head-protocol/unstable/docs/dev/specification"},next:{title:"Commit funds to a Head",permalink:"/head-protocol/unstable/docs/dev/commit_to_a_Head"}},a={},l=[{value:"Incremental Commits",id:"incremental-commits",level:3},{value:"Deposit flow",id:"deposit-flow",level:4},{value:"Recover flow",id:"recover-flow",level:4},{value:"Incremental Decommits",id:"incremental-decommits",level:3}],m={toc:l},s="wrapper";function p(e){let{components:n,...o}=e;return(0,r.kt)(s,(0,t.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"protocol"},"Protocol"),(0,r.kt)("p",null,"Additional implementation-specific documentation for the Hydra Head protocol and extensions like incremental decommits."),(0,r.kt)("h3",{id:"incremental-commits"},"Incremental Commits"),(0,r.kt)("h4",{id:"deposit-flow"},"Deposit flow"),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    Alice->>+Node A: POST /commit UTxO\n    Node A--\x3e>-Alice: depositTx\n\n    Alice ->> Alice: sign depositTx\n    Alice ->> Chain: submit depositTx\n\n    Chain ->>+ Node A: OnDepositTx utxo\n    Chain ->>+ Node B: OnDepositTx utxo\n\n    Node A --\x3e> Alice: CommitRecorded\n\n    par Alice isLeader\n        Node A->>Node A: ReqSn utxoToCommit\n    and\n        Node A->>Node B: ReqSn utxoToCommit\n    end\n\n    Node A->>Node A: sig = sign snapshot incl. utxoToCommit\n\n    par broadcast\n        Node A->>Node A: AckSn sig\n    and\n        Node A->>Node B: AckSn sig\n    end\n    Node B->>Node A: AckSn sig\n    Node A --\x3e> Alice: SnapshotConfirmed\n\n    Node A --\x3e> Alice: CommitApproved\n\n    Node A ->> Chain: IncrementTx snapshot sig\n    Chain ->> Node A: OnIncrementTx\n    Node A --\x3e> Alice: CommitFinalized"}),(0,r.kt)("h4",{id:"recover-flow"},"Recover flow"),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    Alice->>+Node A: DELETE /commits/<tx-id>\n    Node A->>Chain: recoverTx\n    Chain ->>+ Node A: OnRecoverTx utxo\n    Chain ->>+ Node B: OnRecoverTx utxo\n    Node A --\x3e>- Alice: CommitRecovered\n    Node B --\x3e>- Bob: CommitRecovered\n    Node A--\x3e>-Alice: OK\n"}),(0,r.kt)("h3",{id:"incremental-decommits"},"Incremental Decommits"),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    Alice->>+Node A: POST /decommit (decTx)\n    Node A--\x3e>-Alice: OK\n\n    Node A->>Node A: canApply decTx\n\n    par broadcast\n        Node A->>Node A: ReqDec decTx\n    and\n        Node A->>Node B: ReqDec decTx\n    end\n\n    Node A --\x3e> Alice: DecommitRequested\n\n    par Alice isLeader\n        Node A->>Node A: ReqSn decTx\n    and\n        Node A->>Node B: ReqSn decTx\n    end\n\n    Node A->>Node A: canApply decTx, decUTxO =  outputs(decTx)\n    Node A->>Node A: sig = sign snapshot incl. decUTxO\n\n    par broadcast\n        Node A->>Node A: AckSn sig\n    and\n        Node A->>Node B: AckSn sig\n    end\n\n    Node B->>Node A: AckSn sig\n\n    Node A --\x3e> Alice: SnapshotConfirmed\n    Node A --\x3e> Alice: DecommitApproved\n\n    Node A ->> Chain: DecrementTx snapshot sig\n    Chain ->> Node A: OnDecrementTx\n    Node A --\x3e> Alice: DecommitFinalized"}))}p.isMDXComponent=!0}}]);